// Turns a simple text file based todo list into a ticker on your panel.
// Author: Thomas Scott
// Based on Andreas' stock ticker app here:http://cinnamon-spices.linuxmint.com/applets/view/187


// First, we need to import some Libs:
const Main = imports.ui.main;

const Lang = imports.lang;
const Applet = imports.ui.applet;
const GLib = imports.gi.GLib;
const Util = imports.misc.util;
const AppletDir = imports.ui.appletManager.appletMeta['todo@hstubbs3'].path;
const Settings = imports.ui.settings;
// for repeated updating:
const Mainloop = imports.mainloop;

// debug flag
var debug=false;

// in play vars
var currItem=0;
var windowPos=0;
var currTime=1;
var totalTime=0;

var list = ['Nothing to do'];


function MyApplet(orientation) {
	this._init(orientation);
}

MyApplet.prototype = {
    __proto__: Applet.TextIconApplet.prototype,
	
	_init: function(orientation,instanceId) {        

		// bind settings
		this._preferences = {};
		this.settings = new Settings.AppletSettings(this._preferences, "todo@hstubbs3", instanceId);

		this.settings.bindProperty(Settings.BindingDirection.IN,
                         "text_width",
                         "text_width",
                         this.on_settings_changed,
                         null);

		this.settings.bindProperty(Settings.BindingDirection.IN,
                         "lead_trail_time",
                         "lead_trail_time",
                         this.on_settings_changed,
                         null);

		this.settings.bindProperty(Settings.BindingDirection.IN,
                         "list_editor",
                         "list_editor",
                         this.on_settings_changed,
                         null);

		this.settings.bindProperty(Settings.BindingDirection.IN,
                         "important_color",
                         "important_color",
                         this.on_settings_changed,
                         null);

	        Applet.TextIconApplet.prototype._init.call(this, orientation);
   		try {
			this.set_applet_label("Todo App Starting...");
			// Set the Tooltip-Text
			this.set_applet_tooltip(_("Click to edit the list"));
			this.applet_running=true;
			Main.notify("Todo Applet Started");
	                this.update_todolist();           
		}
        	catch (e) {
        		global.logError(e);
        	}		
	},
	

	// Open the todo list when clicked
	on_applet_clicked: function(event) {
		Util.spawnCommandLine(this._preferences.list_editor + " " + AppletDir + '/todo.list');
	},

	on_applet_removed_from_panel: function(event) { 
		Main.notify("Todo Applet Stopped");
		this.applet_running=false;
		},

	
	
	update_todolist: function() {   

		// move to the next item
		if(currTime > totalTime)
		{
			// grab the file contents 
			// TODO check whether file is updated rather than grabbing every time)
		    	this.file = AppletDir + '/todo.list';
			if (GLib.file_test(this.file, GLib.FileTest.EXISTS)) {
				let content = GLib.file_get_contents(this.file)
				let todolist =content.toString().split('\n').slice(0,-1);
				// get rid of "true," in the first field
				todolist[0] = todolist[0].replace("true,", "");
				list=todolist;
			} 

			// move to the next item and reset in play vars			
			currItem++;
			currTime=0;
			windowPos=0;

			// skip invalid, comment and empty items
			while(typeof list[currItem] == 'undefined' || list[currItem].substring(0,1)=="#" || list[currItem] == "") {
				currItem++;
				if(currItem > list.length)
				{
					currItem=0;
				}
			}

			if(currItem > list.length)
			{
				currItem=0;
			}

			// work out the display time for the item
//			if scrolling then the scroll time should be added
			//totalTime=list[currItem].length + (this._preferences.lead_trail_time*2) - this._preferences.text_width;
			
//			// if not scrolling just use twice the time out (once for lead in once for lead out)
			//if(totalTime<this._preferences.lead_trail_time*2)
//			{	
//				totalTime=this._preferences.lead_trail_time*2;
//			}
			totalTime=1;
		}

		// if scrolling is necessary then scroll
//		if(windowPos < totalTime && currTime > this._preferences.lead_trail_time && windowPos+this._preferences.text_width < list[currItem].length)
//		{
//			windowPos++;
//		}

		// increment the time displayed for
		currTime++;

		// build debug data
//		var debugString = "currItem=" + currItem + ":currTime=" + currTime + ":totalTime=" + totalTime;

		// add formatting if important item
//		if(list[currItem].substring(0,3)=="***")
//		{
//			this.actor.style = "background-color:" + this._preferences.important_color;
//		}else{
//	 		this.actor.style = "";
//		}

		//send notice to OS - but this is only mention of Main, not really constructed here... doesn't seem pomodoro applet constructs it either though..
		Main.notify(list[currItem]);

//old render label -
		// render the values onto the applet 
//		this.set_applet_label(list[currItem].substring(windowPos,windowPos+this._preferences.text_width) + (debug?debugString:""));


//render all tasks to label
		
		var item=0;
		var tasksLabel='Tasks-'
		for (item=0; item < list.length; item++) {

			while(typeof list[item] == 'undefined' || list[currItem].substring(0,1)=="#" || list[currItem] == "") { item++; }
				if ( item < list.length ) { taskLabel+=' ' + list[item]; }
			}
			
//		this.set_applet_label(taskLabel);
		this.set_applet_label("testing only")
	      	//update every X seconds - was timeout_add(300 here is 3/10th second.. times a second.. too fast for notifications of tasks... 
//changed to add_seconds(60
		//maybe just rewrite to use timer.js from pomodoro applet?
		if(this.applet_running) {
		Main.notify("Applet Running");
		Mainloop.timeout_add_seconds(60, Lang.bind(this, this.update_todolist));
			}
        	},
};

function main(metadata, orientation, panel_height, instanceId) {  
    let myApplet = new MyApplet(orientation,instanceId);
    return myApplet;      
}

